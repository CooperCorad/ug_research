NOTE: any defn that is followed by another defn indented at same level without a preceding
'|' is the exact same 

regexp  ::=  <atom>              # TODO: pces??
        |   <regexp>|<regexp>

peices  ::=                         ; matches empty
        |   <peice><peices>

peice   ::= <repeat>
        |   <repeat><               ; thrify operator
            <repeat> thrifty
            <repeat> t
        |   <atom>

repeat  ::=  <atom>*
        |   <atom>+
        |   <atom>?


#TODO escape characters as atoms
atom    ::= (<regexp>)              ; match & report
        |   [<range>]               ; match range inside
        |   [^<range>]              ; match 'range inside
        |   .                       ; match any ('\n in ML Mode)
        |   ^                       ; match start (")
        |   $                       ; match end (")
        |   <character>             ; any character (NO ESCAPES NEEDED)
        |   (mode:<mode>:<regexp>)  ; match using given mode
    #TODO shrubbery style defns
            (m:<mode>:<regexp>)
        |   (?><regexp>)            ; match only first 
            (first <regexp>)
            (f <regexp>)
        |   <look_to>               ; match empty if <look_to> matches
        |   (? <test> <peices> | <peices>)              ; if test match fst else match snd
            (if <test> then <peices> else <peices>)
            (if <test> | <peices> | <peices>)

        |   (? <test> <peices>)     ; if test match fst else empty
            (if <test> <peices>)
                                                            # e.g. is this even necessary??
        |   def <name>: (<regexp>)   ; binds name (some rhombus valus character sequence that is not already named
                                    ; either in context or as an operator itself) and simultaniously asks to match on regexp
                                    ; e.g. rx `bind letters: (["a"-"zA"-"Z"]) 
                                        ; will simultaniously match on and bind on the pattern provided
                                    ; and something like rx `bind letters: (["a"-"zA"-"Z"]) letters*
                                        ; is equivalent to rx `(["a"-"zA"-"Z"])+
        |   <name>                  ; bound name being used for matching
        |   newline
        |   null                    ; match null character  # TODO how to work with escape characters
        |   tab
        |   range <num_range>

#TODO gonna need a serious think about the way the NO ESCAPES NEEDED policty effects literals and character ranges                                                           
#TODO definitely needs rework!! seperate what and what cannot be concatinated in paricular
range   ::= <literal>               ; literally!
    ??  |   <literal><literal>      ; literally concatination!
        |   <literal>-<literal>     ; literally a unicode range
        |   <range>&&<range>        ; intersection of ranges
        |   <range>--<range>        ; direct subtraction
        |   <range><range>


        # TODO no question marks
look_to ::= (?= <regexp>)           ; match if regexp matches
            (if <regexp>)           ; TODO no conflit with atomic?
        |   (?! <regexp>)           ; match if regexp does NOT match
            (if not <regexp>)       ; TODO " ^^
        |   (?<= <regexp>)          ; match if regexp matches preceding
            (if previous <regexp>)
            (if prev <regexp>)
        |   (?<! <regexp>)          ; match if preceding does not match
            (if not previous <regexp>)
            (if not prev <regexp>)

test    ::= (<n>)                   ; true if nth '(' has matches # TODO what the hell is this revisit
        |   <look_to>               ; true if look_to matches


mode    ::=                         ; empty - same as surrounding mode
        |   <mode>i                 ; case insensitive
            <mode>insensitive 
        |   <mode>s                 ; case sensitive
            <mode>sensitive
        |   <mode>multi             ; multiline mode #TODO -s, s, -m, m 
            <mode>multiline                          # from docs??
        |   <mode>single            ; not multi mode
            <mode>monoline          ; singleline?

literal ::= any character           #TODO think on what escape characrers
                                    #remain and must be parsed e.g.
                                    # '\0' '\n' '\t' etc.
num_range   ::= "<n>"-"<m>"   ; matches any and all numbers between n and m
                                    ; range "0"-"244" will match "0" and "000" etc.



Pregexp:

repeat  ::= ...
        |   <atom>{<n>}
        |   <atom>{<n>, <m>}
        |   <atom>{,<m>}
        |   <atom>{}

atom    ::= ...
        |   backref<n>
            br<n>
        |   <class>
        |   word bound               ; match wordbound
        |   in word                  ; matches not in word (word*)
        |   property {<property>}
            p {<property>}
        |   not property {<property>}
            np {<property>}

range   ::= ...
        |   <posix>

class   ::= d                           ; digit
            digit
        |   not d
            not digit
        |   w                           ; a-z A-Z 0-9
            word
        |   not w
            not word
        |   s                            ;space, tab, newline, formfeed, return
            space
        |   not s
            not space

posix   ::= alpha                       ; a-z A-z
        |   upper                       ; A-Z
        |   lower                       ; a-z
        |   digit                       ; 0-9
        |   hex                         ; 0-9, a-f, A-F
        |   alnum                       ; a-z, A-Z, 0-9
        |   word                        ; a-z, A-Z, 0-9, _
        |   blank                       ; space and tab
        |   space
        |   graph                       ;Contains all ASCII characters that use ink
        |   print                       ;Contains space, tab, and ASCII ink users
        |   cntrl                       ;Contains all characters with scalar value < 32
        |   ascii                       ; any ASCII char


#TODO 
    bindings in the context of other bindings   
    e.g.
        ['0'-'9']{2} -> matches any 2 digit number
        range '0'-'25' -> matches any number 0-25 
    or double kleene star ** etc. enforcing syntactic constraints

sub sub spaces for rhombus




# TODO PRESENTATION 3/21 -- 
    whats happening now? what were the inspirations? background?

