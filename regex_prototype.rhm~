#lang rhombus/static/and_meta

import:
  lib("racket/base.rkt") as base
  file("character_class_lang.rhm").c_range
  file("character_class_lang.rhm").c_range_meta
 
  file("character_class_lang.rhm") open
  //file("character_class_lang.rhm").#%brackets
  //file("character_class_lang.rhm")

export:
  // The main form:
  rx
  regexp
  rx_ret
  meta: regexp_meta

  // Operators for use inside `rx'...'`:
  //any newline
  || * ? + ^ $ ! word in only 
  if matches not property ~~
  - -- && ^

  // Implicit operators, like the one before a literal string;
  // we use `names` here so that these names are not
  // misinterpreted as implicits in the `export` sublangauge!
  names: #%literal #%comp #%parens #%juxtapose #%call #%brackets #%index


  // API functions
  rx_match rx_match_as_list rx_try_match
  rx_quote
  rx_match_positions rx_match_positions_as_list
  rx_is_match rx_is_exact_match
  rx_max_lookbehind
  rx_split rx_replace rx_replace_all
    

// Instantiate enforestation and macro machinery for the
// regexp sublanguage:
space.enforest regexp:
  space_path rhombus/regexp
  macro_definer macro
  bridge_definer bridge
  meta_namespace regexp_meta:
    description "regexp"
    parse_syntax_class Parsed
    parsed_packer do_pack
    parsed_unpacker do_unpack
    reflection reflect
    // This recursive parsing is what the default checker does:
    #//
    parse_checker: fun (stx, who):
                     match stx
                     | _ when do_unpack(stx, fun (x): #false): stx
                     | (_ :: Syntax) && '$(next :: regexp_meta.Parsed)': next
                     | _: syntax_meta.error("bad result", stx)
    // Improve the error for an identifier that isn't an operator
    identifier_parser id_parse

    export pack unpack reflect

    fun pack(s :: String) :: Syntax:
      do_pack(s)
    fun unpack(stx) :: String:
      do_unpack(stx, #false).unwrap()
    fun id_parse(id):
      match id
      | 'alpha': regexp_meta.do_pack("[[:alpha:]]")
      | 'upper': regexp_meta.do_pack("[[:upper:]]")
      | 'lower': regexp_meta.do_pack("[[:lower:]]")
      | 'digit': regexp_meta.do_pack("[[:digit:]]")
      | 'hex': regexp_meta.do_pack("[[:xdigit:]]")
      | 'alnum': regexp_meta.do_pack("[[:alnum:]]")
      | 'word': regexp_meta.do_pack("[[:word:]]")
      | 'blank': regexp_meta.do_pack("[[:blank:]]")
      | 'space': regexp_meta.do_pack("[[:space:]]")
      | 'graph': regexp_meta.do_pack("[[:graph:]]")
      | 'print': regexp_meta.do_pack("[[:print:]]")
      | 'cntrl': regexp_meta.do_pack("[[:cntrl:]]")
      | 'ascii': regexp_meta.do_pack("[[:ascii:]]")
      | 'any': regexp_meta.do_pack(".")
      | 'newline': regexp_meta.do_pack("\n")
      | 'space': regexp_meta.do_pack(" ")
      | ~else:
          syntax_meta.error("invalid id " +& id)

expr.macro 'Â«rx '$(pat :: regexp_meta.Parsed)'Â»':
  //import lib("racket/base.rkt").#{pregexp}
  //let pat = regexp_meta.unpack(pat)
  let '[$rx_string, [$id_list, ...]]' = regexp_meta.do_unpack(pat)
  //print(rx_string +& "\n\n")
  //print(id_list +& "\n\n")

  let vs = '[$(rx_string.unwrap()), [$id_list, ...]]'
  print("\n[str, FList]: " +& vs)
  print("\n[flist] " +& [id_list, ...] +& "\n\n")
  
  #// 
  for:
    each id: id_list
    print(id +& "\n")
  
  statinfo_meta.wrap('$vs','((bind_key, $vs))')

regexp.macro'$left #%index [$c_rng]':
  ~weaker_than: #%juxtapose
  let '$(c_rng :: c_range_meta.Parsed)' = '[$c_rng]'
  regexp_meta.pack(regexp_meta.unpack(left) +& c_range_meta.do_unpack(c_rng).unwrap())

regexp.macro '#%brackets [$c_rng]':
  ~weaker_than #%juxtapose
  let '$(c_rng :: c_range_meta.Parsed)' = '[$c_rng]'
  regexp_meta.pack((c_range_meta.do_unpack(c_rng)).unwrap_all())

macro '$left eq? $right':
  'check:
     import lib("racket/base.rkt")
     def p1 = base.#{pregexp}($left)
     def p2 = base.#{pregexp}($right)
     p1 == p2
     ~is #true'
#//
module test:
  rx'["a"-"b"]' eq? "[a-b]"
  rx'[^"av"-"x"]' eq? "[^av-x]"
  rx'["a""b"]' eq? "[ab]"
  //["."] eq? "[\\.]" //TODO
  //["."-"z"] eq? "[\\.-z]"
  rx'["2"]' eq? "[2]"
  rx'["a"-"bc"-"d"]' eq? "[a-bc-d]"
  rx'["a"-"b""c"-"d"]' eq? "[a-bc-d]"
  rx'["a"-"z" -- "x"]' eq? "[a-wy-z]"
  rx'["a"-"z" -- "f"-"h"]' eq? "[a-ei-z]"
  
  rx'["a"]' eq? "[a]"
  rx'["a"-"b"]' eq? "[a-b]"
  rx'[^"a"]' eq? "[^a]"
  rx'["a""b"]' eq? "[ab]"
  rx'["a""x"-"y"]' eq? "[ax-y]"
  //["b"-"a"] 
  rx'["a"-"z"&&"x"-"y"]' eq? "[x-y]"
  //["b"-"a" && "a"-"z"]
  rx'["a"-"z" && "xyz"]' eq? "[xyz]"
  rx'["a"-"z"&&"b"-"k"]' eq? "[b-k]"
  rx'[^"^"]' eq? "[^\\^]"
  rx'["abc" && "a"-"y"]' eq? "[abc]"


statinfo.key bind_key:
  ~union: fun(s1, s2):
            s1 && s2
  ~intersect: fun(s1, s2):
                s1 || s2


bind.macro 'rx $id $(pat) ':
  bind_meta.pack('(rx_infoer,
                   ($id, $pat))')

bind.infoer 'rx_infoer($stat_inf, ($id, $pat))':
  print("id: " +& id +& "\n\n")
  print("pat: " +& pat +& "\n\n")
  def '$(x :: regexp_meta.Parsed)' = '$pat'
  print("rx: " +& x +& "\n\n")
  print("static info: " +& stat_inf +& "\n\n")


regexp.macro
| '$('$')$(id :: Identifier)':
    ~weaker_than #%juxtapose
    def id_value :~ Syntax = statinfo_meta.lookup(id, 'bind_key')
    unless id_value
    | throw (id.unwrap() +& ": undefined or is not defined under the rx'...' form")
    regexp_meta.pack("(?:" ++ ( id_value).unwrap() ++ ")")
| '$left $('$')$(id :: Identifier)':
    ~weaker_than #%juxtapose
    def id_value :~ Syntax = statinfo_meta.lookup(id, 'bind_key')
    unless id_value
    | throw (id.unwrap() +& ": undefined or is not defined under the rx'...' form")
    regexp_meta.pack(regexp_meta.unpack(left) +& "(?:" ++ (id_value).unwrap() ++ ")")
| '$left $('$')':
    regexp_meta.pack(regexp_meta.unpack(left) +& "$")

// API
/* TODO:
    - enforce types? just annotations?
    - byte-(p)regexp support?
    - convert most function generation into a macro function generator?
    - avoid repeated imports on function calls?
*/

class rx_ret(match :: String, list :: List):
  private implements Printable
  implements Listable
  private implements Indexable
  
  private override describe(mode, recur):
    PrintDesc.concat(match)
  override method to_list():
    [match] ++ list
  private override method get(index):
    if index == 0
    | match
    | list[index - 1]

fun rx_match(px, input,
             ~start_pos = 0,
             ~end_pos = #false,
             ~output_port = #false,
             ~input_prefix = #""):
  match base.#{regexp-match}(base.#{pregexp}(px), input, start_pos, end_pos, output_port, input_prefix)
  | (m :: PairList) :
      def mList = (for List (match : m):
                     to_string(match))
      rx_ret(mList[0], mList.rest)
  | ~else: #false

fun rx_match_as_list(px, input,
                     ~start_pos = 0,
                     ~end_pos = #false,
                     ~input_prefix = #""):
  def matches :~ PairList = base.#{regexp-match*}(base.#{pregexp}(px), input, start_pos, end_pos, input_prefix)
  for List (m : matches):
    to_string(m)
    
fun rx_try_match(px, input,
                 ~start_pos = 0,
                 ~end_pos = #false,
                 ~output_port = #false,
                 ~input_prefix = #""):
  match base.#{regexp-try-match}(base.#{pregexp}(px), input, start_pos, end_pos, output_port, input_prefix)
  | (m :: PairList): to_string(m[0])
  | ~else: #false

 
fun rx_match_positions(px, input,
                       ~start_pos = 0,
                       ~end_pos = #false,
                       ~output_port = #false,
                       ~input_prefix = #""):
  base.#{regexp-match-positions}(base.#{pregexp}(px), input, start_pos, end_pos, output_port, input_prefix)

fun rx_match_positions_as_list(px, input,
                               ~start_pos = 0,
                               ~end_pos = #false,
                               ~input_prefix = #""):
  base.#{regexp-match-positions*}(base.#{pregexp}(px), input, start_pos, end_pos, input_prefix)


fun rx_is_match(px, input):
  base.#{regexp-match?}(base.#{pregexp}(px), input)

fun rx_is_exact_match(px, input):
  base.#{regexp-match-exact?}(base.#{pregexp}(px), input)

fun rx_quote(str,
             ~case_sensitive = #true):
  to_string(base.#{pregexp-quote}(str, (case_sensitive)))

fun rx_max_lookbehind(px):
  base.#{regexp-max-lookbehind}(base.#{pregexp}(px))

fun rx_split(px, input,
             ~start_pos = 0,
             ~end_pos = #false,
             ~input_prefix = #""):
  def matches :~ PairList = base.#{regexp-split}(base.#{pregexp}(px), input, start_pos, end_pos, input_prefix)
  for List (m : matches):
    to_string(m)

fun rx_replace(px, input, insert,
               ~input_prefix = #""):
  to_string(base.#{regexp-replace}(base.#{pregexp}(px), input, insert, input_prefix))

fun rx_replace_all(px, input, insert,
                   ~start_pos = 0,
                   ~end_pos = #false,
                   ~input_prefix = #""):
  to_string(base.#{regexp-replace*}(base.#{pregexp}(px), input, insert, start_pos, end_pos, input_prefix))


module terr:
 // rx'"a""b"'
  //rx'"b" (a: "a")' // unbound id?
  //rx'(a: "a" (b: "b"))'
  rx'(a: "a" (d: "d") (b: "b" (c: "c")))'
  //rx'(a: "a") || (b: "b")'
  //rx'(a: "a") (b: "b")'

// `#%parens` is implicitly added before parentheses
// that do not have a parsed term or operator before
regexp.macro
| '#%parens ($(name :: Identifier): $(cap_group :: regexp_meta.Parsed))': //TODO: check that order of nested c_gs is correct ? [name] ++ list_from_parsed?
    match regexp_meta.do_unpack(cap_group)
    | '[$cg_str, [$cg_id_list, ...]]':
        regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#'$name, $cg_id_list, ...]]')
    | '[$cg_str, #false]':
        regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#'$name]]')
    
| '#%parens (if $tst ... | $(then :: regexp_meta.Parsed) | $(else :: regexp_meta.Parsed))':
    let '$(tst :: regexp_meta.Parsed)' = '$tst ...' // TODO move then and else to similaer forms to avoid out of order parsing -> error issues
    regexp_meta.pack("(?" ++ regexp_meta.unpack(tst) ++ regexp_meta.unpack(then) ++ "|" ++ regexp_meta.unpack(else) ++ ")")
| '#%parens (mode : {$(mode :: Identifier), ...} : $(rgxp :: regexp_meta.Parsed))':
    //~same_as ^
    //def mutable accum = "(?"
    def modes = (for values(accum = "(?") (m: [mode, ...]):
                   match m
                   | 'sensitive': accum +& "-i"
                   | 'insensitive': accum +& "i"
                   | 'multiline': accum +& "m"
                   | 'monolne': accum +& "-m"
                   | ~else: syntax_meta.error("mode: " ++ m ++ " not recognized"))
    regexp_meta.pack(modes +& ":" ++ regexp_meta.unpack(rgxp) ++ ")")
    
| '#%parens (matches prev $(tst :: regexp_meta.Parsed))':
    regexp_meta.pack("(?<=" ++ regexp_meta.unpack(tst) ++ ")")
| '#%parens (not matches prev $(tst :: regexp_meta.Parsed))':
    regexp_meta.pack("(?<!" ++ regexp_meta.unpack(tst) ++ ")")
| '#%parens (matches $(tst :: regexp_meta.Parsed))':
    regexp_meta.pack("(?=" ++ regexp_meta.unpack(tst) ++ ")")
| '#%parens (not matches $(tst :: regexp_meta.Parsed))':
    regexp_meta.pack("(?!" ++ regexp_meta.unpack(tst) ++")")
| '#%parens ($(n :: Int))':
    unless n is_a PosInt  //TODO: does racket allow \0 backref or does it start at \1?
    | syntax_meta.error("You cannot check a match on capture group number <= 0")
    regexp_meta.pack("(" ++ n ++ ")")
| '#%parens ($(p :: regexp_meta.Parsed))':
    regexp_meta.pack("(" ++ regexp_meta.unpack(p) ++ ")")

//TODO: rework syntax, looks ugly
regexp.macro '~~( $(p :: regexp_meta.Parsed) )': // ~uncaptured
  regexp_meta.pack("(?:" ++ regexp_meta.unpack(p) ++ ")")
#//
regexp.macro '$(kw :: Keyword): ( $(p :: regexp_meta.Parsed) )':
  unless kw.
  regexp_meta.pack("(?:" ++ regexp_meta.unpack(p) ++ ")")

#//
module test:
  check:
    def p1 = rx'(if (matches "x"+) | "a" | "b")'
    ~completes

  check:
    def p1 = pregexp(rx'(matches "X"+)')
    def p2 = base.#{pregexp}("(?=X+)") //TODO once again issues with atomic?
    p1 == p2
    ~is #true
  
  check:
    def p1 = pregexp(rx'(not matches "X"+)')
    def p2 = base.#{pregexp}("(?!X+)") 
    p1 == p2
    ~is #true
  
  check:
    def p1 = pregexp(rx'(matches prev ("y")("X"))')
    def p2 = base.#{pregexp}("(?<=(y)(X))") 
    p1 == p2
    ~is #true
    
  check:
    def p1 = pregexp(rx'(not matches prev ("X"))')
    def p2 = base.#{pregexp}("(?<!(X))") 
    p1 == p2
    ~is #true
    
  #//
  check:
    ~eval
    rx'("x")(0)'
    ~throws "backreference"
regexp.macro 'not property : $(prop :: Identifier)': // TODO not property {x} vs. property {^x} --> necessary to keep both?
  regexp_meta.pack("\\P{" ++ to_string(prop) ++ "}") // additionally, does the not <x> thing feel tired? alternative?
regexp.macro 'property : $(prop :: Identifier)':
  regexp_meta.pack("\\p{" ++ to_string(prop) ++ "}")
#//
module test:
  check:
    def p1 = pregexp(rx'property : Ll')
    def p2 = base.#{pregexp}("\\p{Ll}")
    p1 == p2
    ~is #true

  check:
    def p1 = pregexp(rx'not property :Ll')
    def p2 = base.#{pregexp}("\\P{Ll}")
    p1 == p2
    ~is #true

// `#%literal` is implicitly added before literals, like strings,
// that do not have an operator before
// TODO revert to old?
// old
regexp.macro '#%literal $(s :: String)':
  import lib("racket/base.rkt").#{regexp-quote}
  //'$values(regexp_meta.pack(to_string(#{regexp-quote}(s.unwrap()))), [])'
  //print( (values(to_string(#{regexp-quote}(s.unwrap())), [])))
  //regexp_meta.pack(values(to_string(#{regexp-quote}(s.unwrap())), []))
  regexp_meta.do_pack('[$(to_string(#{regexp-quote}(s.unwrap()))), #false]')


// `#%juxtapose` is implicitly added after something that's
// parsed and before a non-operator
regexp.macro '$left #%juxtapose $right':
  ~same_as: #%call
  //regexp_meta.pack("" ++ regexp_meta.unpack(left) ++ regexp_meta.unpack(right))
  combine(left, right, "")
  
  //regexp_meta.do_pack('[$(l_str.unwrap() +& r_str.unwrap()), [$id_list]]')

// `#%call` is implicitly added between a parsed term
// and parentheses; we want just the same thing
// as juxtaposition here, though
regexp.macro '$left #%call $tail ...':
  ~same_as: #%juxtapose
  values('$left', '#%juxtapose $tail ...')

meta:
  fun atomic(stx) :~ String:
    match regexp_meta.unpack(stx)
    | ".": "."
    | s: to_string(s) // TODO: originally s: "(?:" ++ s ++ ")" better?

  fun combine(left, right, insert):
    let '$(left :: regexp_meta.Parsed)' = left
    let '$(right :: regexp_meta.Parsed)' = right
    match left
    | '[$l_str, [$l_ids, ...]]':
        match right
        | '[$r_str, [$r_ids, ...]]': //both have id lists
            regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), [$l_ids, ..., $r_ids, ...]]')
        | '[$r_str, #false]':
            regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), [$l_ids, ...]]')
    | '[$l_str, #false]':
        match right
        | '[$r_str, [$r_ids, ...]]':
            regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), [$r_ids, ...]]')
        | '[$r_str, #false]':
            regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), #false]')

  fun append(left, append):
    match left
    | '[$l_str, [$l_ids, ...]]':
        regexp_meta.do_pack('[$(l_str +& append), [$l_ids, ...]]')
    | '[$l_str, #false]':
        regexp_meta.do_pack('[$(l_str +& append), #false]')

regexp.macro
| '$left || $right':
    ~weaker_than: #%juxtapose ~other +
    ~stronger_than: !
    //regexp_meta.pack(atomic(left) ++ "|" ++ atomic(right)) // TODO: atomic needed? likely no!
    combine(left, right, "||")

#//
regexp.macro '#%alts $rst':
  [print(rst), ...]
  //regexp_meta.pack(atomic(fst) ++ [ "|" ++ atomic(rst), ...])
#//
rx'| "a"
   | "v"'

regexp.macro
| '$left * lazy': //TODO: optional lazy rather than double macro
    ~weaker_than: #%juxtapose ~other
    ~stronger_than: ||
    regexp_meta.pack(atomic(left) ++ "*?")
| '$left *':
    regexp_meta.pack(atomic(left) ++ "*")

regexp.macro
| '$left + lazy':
    ~weaker_than: #%juxtapose ~other
    ~stronger_than: ||
    regexp_meta.pack(atomic(left) ++ "+?")
| '$left +':
    regexp_meta.pack(atomic(left) ++ "+")

regexp.macro
| '$left ? lazy':
    ~weaker_than: #%juxtapose #%call
    regexp_meta.pack(atomic(left) ++ "??")
| '$left ?':
    regexp_meta.pack(atomic(left) ++ "?")
#//
module test:
  rx'"a" + lazy'
  //rx'"?" lazy'
  rx'"a"? lazy'
  rx'"a" lazy'

//'$([^"a"])'
#//
module test:
  check:
    def p1 = pregexp(rx'"zyx"+lazy') //TODO: do we def wrap in parens? or let the user decide when to use? I feel like giving the user the ability is the move
    def p2 = base.#{pregexp}("zyx+?") // e.g. "(zxy)+?"
    p1 == p2
    ~is #true
  
  check:
    ~eval
    rx'"x"++'
    ~raises "" // TODO update

// `#%comp` is implicitly added between a parsed term
// and curly braces
    // TODO LAZY
regexp.macro #%comp:
  ~stronger_than: #%juxtapose #%call
| '$left #%comp {$(min :: Int), _}':
    regexp_meta.pack(atomic(left) ++ "{" +& min.unwrap() ++ ",}")
| '$left #%comp {$(min :: Int), $(max :: Int)}':
    regexp_meta.pack(atomic(left) ++ "{" +& min.unwrap() ++ "," +& max.unwrap() ++ "}")
| '$left #%comp {$(count :: Int)}':
    regexp_meta.pack(atomic(left) ++ "{" +& count.unwrap() ++ "}")

regexp.macro 
| '^ $right':
    ~weaker_than: #%juxtapose #%call $
    regexp_meta.pack("^" ++ regexp_meta.unpack(right))

regexp.macro '! $right':
  ~weaker_than: ~other
  ~stronger_than: #%juxtpapose #%call
  regexp_meta.pack("(?!" ++ regexp_meta.unpack(right) ++ ")")

regexp.macro '$left word bound':
  ~stronger_than: #%juxtapose #%call
  ~same_as ^
  regexp_meta.pack(atomic(left) ++ "\\b")

regexp.macro '$left in word':
  ~stronger_than: #%juxtapose #%call
  ~same_as ^
  regexp_meta.pack(atomic(left) ++ "\\B")

regexp.macro 'only first $rgxp':
  ~stronger_than ^
  regexp_meta.pack("(?>" ++ regexp_meta.pack(rgxp) ++ ")")

regexp.macro 'numrng: $(lhs :: Int) - $(rhs :: Int)':
  when !(lhs is_a PosInt && rhs is_a PosInt)
  | error("you cannot take ranges of non integers")