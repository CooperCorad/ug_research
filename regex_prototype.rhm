#lang rhombus/static/and_meta

import:
  lib("racket/base.rkt") as base
  file("character_class_lang.rhm").c_range
  file("character_class_lang.rhm").c_range_meta
 
  file("character_class_lang.rhm") open
  //file("character_class_lang.rhm").#%brackets
  //file("character_class_lang.rhm")

export:
  // The main form:
  rx
  regexp
  c_range
  rx_ret
  meta: regexp_meta combine atomic append prepend wrap c_range_meta

  // Operators for use inside `rx'...'`:
  //any newline
  || * ? + ^ $ ! word in only 
  if matches ~~
  - -- && ^

  // Implicit operators, like the one before a literal string;
  // we use `names` here so that these names are not
  // misinterpreted as implicits in the `export` sublangauge!
  names: #%literal #%comp #%parens #%juxtapose #%call #%brackets #%index


  // API functions
  rx_match rx_match_as_list rx_try_match
  rx_quote
  rx_match_positions rx_match_positions_as_list
  rx_is_match rx_is_exact_match
  rx_max_lookbehind
  rx_split rx_replace rx_replace_all
    

// Instantiate enforestation and macro machinery for the
// regexp sublanguage:
space.enforest regexp:
  space_path rhombus/regexp
  macro_definer macro
  bridge_definer bridge
  meta_namespace regexp_meta:
    description "regexp"
    parse_syntax_class Parsed
    parsed_packer do_pack
    parsed_unpacker do_unpack
    reflection reflect
    // This recursive parsing is what the default checker does:
    #//
    parse_checker: fun (stx, who):
                     match stx
                     | _ when do_unpack(stx, fun (x): #false): stx
                     | (_ :: Syntax) && '$(next :: regexp_meta.Parsed)': next
                     | _: syntax_meta.error("bad result", stx)
    // Improve the error for an identifier that isn't an operator
    identifier_parser id_parse

    export pack unpack reflect

    fun pack(s :: String) :: Syntax:
      do_pack(s)
    fun unpack(stx) :: String:
      do_unpack(stx, #false).unwrap()
    fun id_parse(id):
      match id
      | 'alpha': atomic("[[:alpha:]]")
      | 'upper': atomic("[[:upper:]]")
      | 'lower': atomic("[[:lower:]]")
      | 'digit': atomic("[[:digit:]]")
      | 'hex': atomic("[[:xdigit:]]")
      | 'alnum': atomic("[[:alnum:]]")
      | 'word': atomic("[[:word:]]")
      | 'blank': atomic("[[:blank:]]")
      | 'space': atomic("[[:space:]]")
      | 'graph': atomic("[[:graph:]]")
      | 'print': atomic("[[:print:]]")
      | 'cntrl': atomic("[[:cntrl:]]")
      | 'ascii': atomic("[[:ascii:]]")
      | 'any': atomic(".")
      | 'newline': atomic("\n")
      | 'space': atomic(" ")
      | ~else:
          syntax_meta.error("invalid id " +& id)

expr.macro '«rx '$(pat :: regexp_meta.Parsed)'»':
  import lib("racket/base.rkt").#{pregexp}
  //let pat = regexp_meta.unpack(pat)
  match regexp_meta.do_unpack(pat)
  | '[$rx_string, [$id_list, ...]]':
      #{pregexp}(rx_string.unwrap())
      let vs = '[$(rx_string.unwrap()), [$id_list, ...]]'
      statinfo_meta.wrap('$vs','((bind_key, $vs))')
  | '[$rx_string, #false]':
      #{pregexp}(rx_string.unwrap())
      let vs = '[$(rx_string.unwrap()), #false]'
      statinfo_meta.wrap('$vs','((bind_key, $vs))')

// Implicit forms

regexp.macro'$left #%index [$c_rng]':
  ~stronger_than: ^
  ~weaker_than: #%parens #%juxtapose
  ~same_as: #%brackets
  let '$(c_rng :: c_range_meta.Parsed)' = '[$c_rng]'
  combine(left, atomic(c_range_meta.do_unpack(c_rng).unwrap()))

regexp.macro '#%brackets [$c_rng]':
  ~weaker_than #%parens
  ~same_as: #%index
  let '$(c_rng :: c_range_meta.Parsed)' = '[$c_rng]'
  atomic((c_range_meta.do_unpack(c_rng)).unwrap_all())


// `#%parens` is implicitly added before parentheses
// that do not have a parsed term or operator before
regexp.macro #%parens:
  ~weaker_than: #%literal
  ~same_as: ~~
| '#%parens (mode : {$(mode :: Identifier), ...} : $(rgxp :: regexp_meta.Parsed))':
    //~same_as ^
    def modes = (for values(accum = "(?") (m: [mode, ...]):
                   match m
                   | 'sensitive': accum +& "-i"
                   | 'insensitive': accum +& "i"
                   | 'multiline': accum +& "m"
                   | 'monoline': accum +& "-m"
                   | ~else: syntax_meta.error("mode: " +& m +& " not recognized"))
    //regexp_meta.pack(modes +& ":" ++ regexp_meta.unpack(rgxp) ++ ")")
    wrap(rgxp, modes +& ":", ")")
| '#%parens ($(name :: Identifier): $(cap_group :: regexp_meta.Parsed))': //TODO: check that order of nested c_gs is correct ? [name] ++ list_from_parsed?
    match regexp_meta.do_unpack(cap_group)
    | '[$cg_str, [$cg_id_list, ...]]':
        regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#'$name, $cg_id_list, ...]]')
    | '[$cg_str, #false]':
        regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#'$name]]')
| '#%parens (if $tst ... | $(then :: regexp_meta.Parsed) | $(else :: regexp_meta.Parsed))':
    let '$(tst :: regexp_meta.Parsed)' = '$tst ...' // TODO move then and else to similaer forms to avoid out of order parsing -> error issues
    //regexp_meta.pack("(?" ++ regexp_meta.unpack(tst) ++ regexp_meta.unpack(then) ++ "|" ++ regexp_meta.unpack(else) ++ ")")
    wrap(append(combine(tst, then, ""), "|"), "(?", ")")
| '#%parens (matches prev $(tst :: regexp_meta.Parsed))':
    //regexp_meta.pack("(?<=" ++ regexp_meta.unpack(tst) ++ ")")
    wrap(tst, "(?<=", ")")
| '#%parens (not matches prev $(tst :: regexp_meta.Parsed))':
    //regexp_meta.pack("(?<!" ++ regexp_meta.unpack(tst) ++ ")")
    wrap(tst, "(?<!", ")")
| '#%parens (matches $(tst :: regexp_meta.Parsed))':
    //regexp_meta.pack("(?=" ++ regexp_meta.unpack(tst) ++ ")")
    wrap(tst, "(?=", ")")
| '#%parens (not matches $(tst :: regexp_meta.Parsed))':
    //regexp_meta.pack("(?!" ++ regexp_meta.unpack(tst) ++")")
    wrap(tst, "(?!", ")")
| '#%parens ($(n :: Int))':
    unless n.unwrap() is_a PosInt  //TODO: does racket allow \0 backref or does it start at \1?
    | syntax_meta.error("You cannot check a match on capture group number <= 0")
    //regexp_meta.pack("(" ++ n ++ ")")
    wrap(atomic(n.unwrap()), "(", ")")
| '#%parens ($(p :: regexp_meta.Parsed))': //TODO: move to non-cg
    //regexp_meta.pack("(?:" ++ regexp_meta.unpack(p) ++ ")")
    wrap(p, "(?:", ")")

// '#%literal' is implicitly added before atomic structures (strings here)
regexp.macro '#%literal $(s :: String)':
  ~weaker_than: * + ? #%comp
  atomic(qt(s.unwrap()))

// `#%juxtapose` is implicitly added after something that's
// parsed and before a non-operator
regexp.macro '$left #%juxtapose $right':
  ~same_as: #%call
  combine(left, right)
  
// `#%call` is implicitly added between a parsed term
// and parentheses; we want just the same thing
// as juxtaposition here, though
regexp.macro '$left #%call $tail ...':
  ~same_as: #%juxtapose
  values('$left', '#%juxtapose $tail ...')
  //combine(left, tail, ...)

// Unnamed capture group
regexp.macro '~~( $(p :: regexp_meta.Parsed) )': // ~uncaptured
  ~same_as: #%parens
  match regexp_meta.do_unpack(p)
  | '[$cg_str, [$cg_id_list, ...]]':
      regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#false, $cg_id_list, ...]]')
  | '[$cg_str, #false]':
      regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#false]]')

//backreferences TODO, $right?? both l & r??
regexp.macro
| '$left backref ($br)':
    ~stronger_than: #%parens
    ~weaker_than: #%juxtapose
    //let '$(left :: regexp_meta.Parsed)' = left
    match regexp_meta.do_unpack(left)
    | '[$cg_str, [$cg_id_list, ...]]':
        match br
        | '$(br :: Identifier)':
            def index = find_and_report([cg_id_list, ...], br)
            if index
            | append(left, "\\" +& index)
            | throw("you cannot reference a nonexistant capture group: " +& Syntax.unwrap(br))
        | '$(br :: Int)':
            let br = br.unwrap()
            if br is_a PosInt
            | append(left, "\\" +& br)
            | throw("you cannot reference a nonexistant capture group: " +& br)
    | '[$cg_str, #false]':
        throw("you cannot reference a nonexistant capture group: " +& Syntax.unwrap(br)) //regexp_meta.do_pack('[$("(" +& cg_str.unwrap() +& ")"), [#false]]')
//| 'backref ($br) $right': depricated for now
    

    
// Operators
regexp.macro
| '$left || $right':
    ~stronger_than: ~other
    //regexp_meta.pack(atomic(left) ++ "|" ++ atomic(right)) // TODO: atomic needed? likely no!
    combine(left, right, "|")

regexp.macro
| '$left * lazy': //TODO: optional lazy rather than double macro
    ~weaker_than: #%juxtapose
    ~same_as: + ?
    append(left, "*?")
| '$left *':
    append(left, "*")

regexp.macro
| '$left + lazy':
    ~weaker_than: #%juxtapose
    ~same_as: * ?
    append(left, "+?")
| '$left +':
    append(left, "+")

regexp.macro
| '$left ? lazy':
    ~weaker_than: #%juxtapose
    ~same_as: * +
    append(left, "??")
| '$left ?':
    append(left, "?")

regexp.macro #%comp:
  ~weaker_than: #%juxtapose #%call
  ~same_as: * + ?
| '$left #%comp {$(min :: Int), _}':
    append(left, "{" +& min.unwrap() ++ ",}")
| '$left #%comp {$(min :: Int), $(max :: Int)}':
    append(left, "{" +& min.unwrap() ++ "," +& max.unwrap() ++ "}")
| '$left #%comp {$(count :: Int)}':
    append(left, "{" +& count.unwrap() ++ "}")

regexp.macro 
| '^ $right':
    ~weaker_than: ~other
    //~stronger_than: $
    prepend(right, "^")
    
regexp.macro '$left word bound':
  ~stronger_than: #%juxtapose #%call
  ~same_as ^
  append(left, "\\b")

regexp.macro '$left in word':
  ~stronger_than: #%juxtapose #%call
  ~same_as ^
  append(left, "\\B")

regexp.macro 'only first $rgxp':
  ~stronger_than ^
  let '$(rgxp :: regexp_meta.Parsed)' = rgxp
  wrap(rgxp, "(?>", ")")

// Meta functions

meta:
  import lib("racket/base.rkt").#{regexp-quote}

  fun qt(str :~ String) :~ String:
    #{regexp-quote}(str)

  fun atomic(stx) :~ String:
    regexp_meta.do_pack('[$(to_string(stx)), #false]') // TODO: originally s: "(?:" ++ s ++ ")" better?

  fun
  | combine(left, right, insert):
      let '$(left :: regexp_meta.Parsed)' = left
      let '$(right :: regexp_meta.Parsed)' = right
      match left
      | '[$l_str, [$l_ids, ...]]':
          match right
          | '[$r_str, [$r_ids, ...]]': //both have id lists
              regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), [$l_ids, ..., $r_ids, ...]]')
          | '[$r_str, #false]':
              regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), [$l_ids, ...]]')
      | '[$l_str, #false]':
          match right
          | '[$r_str, [$r_ids, ...]]':
              regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), [$r_ids, ...]]')
          | '[$r_str, #false]':
              regexp_meta.do_pack('[$(l_str.unwrap() +& insert +& r_str.unwrap()), #false]')
  | combine(left, right):
      let '$(left :: regexp_meta.Parsed)' = left
      let '$(right :: regexp_meta.Parsed)' = right
      match left
      | '[$l_str, [$l_ids, ...]]':
          match right
          | '[$r_str, [$r_ids, ...]]': //both have id lists
              regexp_meta.do_pack('[$(l_str.unwrap() +& r_str.unwrap()), [$l_ids, ..., $r_ids, ...]]')
          | '[$r_str, #false]':
              regexp_meta.do_pack('[$(l_str.unwrap() +& r_str.unwrap()), [$l_ids, ...]]')
      | '[$l_str, #false]':
          match right
          | '[$r_str, [$r_ids, ...]]':
              regexp_meta.do_pack('[$(l_str.unwrap() +& r_str.unwrap()), [$r_ids, ...]]')
          | '[$r_str, #false]':
              regexp_meta.do_pack('[$(l_str.unwrap() +& r_str.unwrap()), #false]')

  fun append(left, app):
    let '$(left :: regexp_meta.Parsed)' = left
    match left
    | '[$l_str, [$l_ids, ...]]':
        regexp_meta.do_pack('[$(l_str.unwrap() +& app), [$l_ids, ...]]')
    | '[$l_str, #false]':
        regexp_meta.do_pack('[$(l_str.unwrap() +& app), #false]')
        
  fun prepend(right, prep):
     let '$(right :: regexp_meta.Parsed)' = right
     match right
     | '[$r_str, [$r_ids, ...]]':
         regexp_meta.do_pack('[$(prep +& r_str.unwrap()), [$r_ids, ...]]')
     | '[$r_str, #false]':
         regexp_meta.do_pack('[$(prep +& r_str.unwrap()), #false]')

  fun wrap(in, l, r):
    let '$(in :: regexp_meta.Parsed)' = in
    match in
    | '[$in_str, [$in_ids, ...]]':
        regexp_meta.do_pack('[$(l +& in_str.unwrap() +& r), [$in_ids, ...]]')
    | '[$in_str, #false]':
        regexp_meta.do_pack('[$(l +& in_str.unwrap() +& r), #false]')

  fun find_and_report(id_list, id :: Syntax):
    def ids :: List = List.to_list(id_list)
    def mutable res = #false
    for (index: 0..(ids.length()),
         t_id: ids):
      match t_id
      | '#'$tt_id': when (tt_id.unwrap() == id.unwrap())
                    | res := index + 1
    res

// Escape operators + end of line operator
regexp.macro
| '$left $('$')':
    ~stronger_than: ^
    ~weaker_than: ~other
    append(left, "$")
| '$('$')$(id :: Identifier)':
    ~same_as: #%literal
    def id_value :~ Syntax = statinfo_meta.lookup(id, 'bind_key')
    unless id_value
    | throw (id.unwrap() +& ": undefined or is not defined under the rx'...' form")
    wrap(regexp_meta.do_pack(id_value), "(?:", ")")
/*| '$left $('$')$(id :: Identifier)':
    ~weaker_than #%juxtapose
    def id_value :~ Syntax = statinfo_meta.lookup(id, 'bind_key')
    unless id_value
    | throw (id.unwrap() +& ": undefined or is not defined under the rx'...' form")
    combine(regexp_meta.unpack(left), wrap(id_value.unwrap(), "(?:", ")"))
    */ // TODO: NEED?

macro '$left eq? $right':
  'check:
     import lib("racket/base.rkt")
     def p1 = base.#{pregexp}($left)
     def p2 = [base.#{pregexp}($right), #false]
     p1 == p2
     ~is #true'
#//
module test:
  rx'["a"-"b"]' eq? "[a-b]"
  rx'[^"av"-"x"]' eq? "[^av-x]"
  rx'["a""b"]' eq? "[ab]"
  //["."] eq? "[\\.]" //TODO
  //["."-"z"] eq? "[\\.-z]"
  rx'["2"]' eq? "[2]"
  rx'["a"-"bc"-"d"]' eq? "[a-bc-d]"
  rx'["a"-"b""c"-"d"]' eq? "[a-bc-d]"
  rx'["a"-"z" -- "x"]' eq? "[a-wy-z]"
  rx'["a"-"z" -- "f"-"h"]' eq? "[a-ei-z]"
  
  rx'["a"]' eq? "[a]"
  rx'["a"-"b"]' eq? "[a-b]"
  rx'[^"a"]' eq? "[^a]"
  rx'["a""b"]' eq? "[ab]"
  rx'["a""x"-"y"]' eq? "[ax-y]"
  //["b"-"a"] 
  rx'["a"-"z"&&"x"-"y"]' eq? "[x-y]"
  //["b"-"a" && "a"-"z"]
  rx'["a"-"z" && "xyz"]' eq? "[xyz]"
  rx'["a"-"z"&&"b"-"k"]' eq? "[b-k]"
  rx'[^"^"]' eq? "[^\\^]"
  rx'["abc" && "a"-"y"]' eq? "[abc]"


statinfo.key bind_key:
  ~union: fun(s1, s2):
            s1 && s2
  ~intersect: fun(s1, s2):
                s1 || s2
/*
bind.macro 'rx $id $rx_exp...':
  bind_meta.pack('(rx_infoer,
                   ($id, $rx_exp...))')

bind.infoer 'rx_infoer($static_info, ($id, $rx_exp))':
  let '$(id :: Identifier)' = id
  print(id)
  match rx_exp
  | '«rx '$(pat :: regexp_meta.Parsed)'»':
      print("pat: " +& regexp_meta.do_unpack(pat))
      def info = (match regexp_meta.do_unpack(pat)
                  | '[$_, [$ids, ...]]':
                      [bind_meta.get_info(ids, static_info), ...] //[bind_meta.get_info(id, static_info)] ++
                  | '[$_, #false]':
                      [bind_meta.get_info(id, static_info)])
      print(info)
  | ~else:
      throw("matching on forms of rx'...' not " +& rx_exp)
      
  //print("X: " +& regexp_meta.do_unpack(rx_exp) +& "\n\n")
  '("matching(rx'...' = (rhs :: String))",
    $id,
    (), //TODO stat inf needed?
    (($id, [()], ())),
    rx_matcher,
    rx_committer,
    rx_binder,
    ($id, $rx_exp))' //needs to include all info for id names generated by the rx'...' form, thus need to evaluate rx'...' at this point

bind.matcher 'rx_matcher($rhs, $id, $IF, $success, $failure)':
  '$IF $rhs is_a String
   | $success
   | $failure'

bind.binder 'rx_committer($arg, $id)':

  ''

bind.binder 'rx_binder($arg, $id)':
  //import:
    //file("regex_prototype.rhm") open
  print("here")
  match id
  | '($total_id, $rx_exp)':
      //let rx_exp = regexp_meta.do_unpack(rx_exp)
      //print(rx_exp)
      'def $total_id: $rx_exp' //Avoid execution of rx'...' here, we want to confirm it way ahead of this
  //'let x = 1'
  //'def $id: $arg'
  
*/
// API
/* TODO:
    - enforce types? just annotations?
    - byte-(p)regexp support?
    - convert most function generation into a macro function generator?
    - avoid repeated imports on function calls?
*/

class rx_ret(match, list :: List):
  private implements Printable
  implements Listable
  private implements Indexable
  
  private override describe(mode, recur) :: String:
    to_string(match, ~mode: #'expr)
  override method to_list():
    [match] ++ list
  private override method get(index):
    if index == 0
    | match
    | list[index - 1]


// extracts string from px
fun rx_get(px):
  match px
  | [(rx_string :: String), [id_list, ...]]:
      rx_string
  | [(rx_string :: String), #false]:
      rx_string
  | rx_string :: String:
      rx_string
  | ~else:
      throw("rx functions do not accept " +& px)

  
fun rx_match(px, input,
             ~start_pos = 0,
             ~end_pos = #false,
             ~output_port = #false,
             ~input_prefix = #""):
  
  match base.#{regexp-match}(base.#{pregexp}(rx_get(px)), input, start_pos, end_pos, output_port, input_prefix)
  | (m :: PairList) :
      def mList = (for List (match : m):
                     if match
                     | to_string(match)
                     | match)
      rx_ret(mList[0], mList.rest)
  | ~else: #false

fun rx_match_as_list(px, input,
                     ~start_pos = 0,
                     ~end_pos = #false,
                     ~input_prefix = #""):
  def matches :~ PairList = base.#{regexp-match*}(base.#{pregexp}(rx_get(px)), input, start_pos, end_pos, input_prefix)
  for List (m : matches):
    to_string(m)
    
fun rx_try_match(px, input,
                 ~start_pos = 0,
                 ~end_pos = #false,
                 ~output_port = #false,
                 ~input_prefix = #""):
  match base.#{regexp-try-match}(base.#{pregexp}(rx_get(px)), input, start_pos, end_pos, output_port, input_prefix)
  | (m :: PairList): to_string(m[0])
  | ~else: #false

 
fun rx_match_positions(px, input,
                       ~start_pos = 0,
                       ~end_pos = #false,
                       ~output_port = #false,
                       ~input_prefix = #""):
  base.#{regexp-match-positions}(base.#{pregexp}(rx_get(px)), input, start_pos, end_pos, output_port, input_prefix)

fun rx_match_positions_as_list(px, input,
                               ~start_pos = 0,
                               ~end_pos = #false,
                               ~input_prefix = #""):
  base.#{regexp-match-positions*}(base.#{pregexp}(rx_get(px)), input, start_pos, end_pos, input_prefix)


fun rx_is_match(px, input):
  base.#{regexp-match?}(base.#{pregexp}(rx_get(px)), input)

fun rx_is_exact_match(px, input):
  base.#{regexp-match-exact?}(base.#{pregexp}(rx_get(px)), input)

fun rx_quote(str,
             ~case_sensitive = #true):
  to_string(base.#{pregexp-quote}(str, (case_sensitive)))

fun rx_max_lookbehind(px):
  base.#{regexp-max-lookbehind}(base.#{pregexp}(rx_get(px)))

fun rx_split(px, input,
             ~start_pos = 0,
             ~end_pos = #false,
             ~input_prefix = #""):
  def matches :~ PairList = base.#{regexp-split}(base.#{pregexp}(rx_get(px)), input, start_pos, end_pos, input_prefix)
  for List (m : matches):
    to_string(m)

fun rx_replace(px, input, insert,
               ~input_prefix = #""):
  //let px = rx_get(px)
  to_string(base.#{regexp-replace}(base.#{pregexp}(rx_get(px)), input, insert, input_prefix))

fun rx_replace_all(px, input, insert,
                   ~start_pos = 0,
                   ~end_pos = #false,
                   ~input_prefix = #""):
  to_string(base.#{regexp-replace*}(base.#{pregexp}(rx_get(px)), input, insert, start_pos, end_pos, input_prefix))


//module terr:
 // rx'"a""b"'
  //rx'"b" (a: "a")' // unbound id?
  //rx'(a: "a" (b: "b"))'
  //rx'(a: "a" (d: "d") (b: "b" (c: "c")))'
  //rx'(a: "a") || (b: "b")'
  //rx'(a: "a") (b: "b")'


#//
module test:
  check:
    def p1 = rx'(if (matches "x"+) | "a" | "b")'
    ~completes

  check:
    def p1 = pregexp(rx'(matches "X"+)')
    def p2 = base.#{pregexp}("(?=X+)") //TODO once again issues with atomic?
    p1 == p2
    ~is #true
  
  check:
    def p1 = pregexp(rx'(not matches "X"+)')
    def p2 = base.#{pregexp}("(?!X+)") 
    p1 == p2
    ~is #true
  
  check:
    def p1 = pregexp(rx'(matches prev ("y")("X"))')
    def p2 = base.#{pregexp}("(?<=(y)(X))") 
    p1 == p2
    ~is #true
    
  check:
    def p1 = pregexp(rx'(not matches prev ("X"))')
    def p2 = base.#{pregexp}("(?<!(X))") 
    p1 == p2
    ~is #true
    
  #//
  check:
    ~eval
    rx'("x")(0)'
    ~throws "backreference"

//deptricated?
#// 
regexp.macro 'not property : $(prop :: Identifier)': // TODO not property {x} vs. property {^x} --> necessary to keep both?
  wrap(prop, "\\P{", "}") // additionally, does the not <x> thing feel tired? alternative?
#//
regexp.macro 'property : $(prop :: Identifier)':
  regexp_meta.pack("\\p{" ++ to_string(prop) ++ "}")
#//
module test:
  check:
    def p1 = pregexp(rx'property : Ll')
    def p2 = base.#{pregexp}("\\p{Ll}")
    p1 == p2
    ~is #true

  check:
    def p1 = pregexp(rx'not property :Ll')
    def p2 = base.#{pregexp}("\\P{Ll}")
    p1 == p2
    ~is #true


#//
module test:
  check:
    def p1 = pregexp(rx'"zyx"+lazy') //TODO: do we def wrap in parens? or let the user decide when to use? I feel like giving the user the ability is the move
    def p2 = base.#{pregexp}("zyx+?") // e.g. "(zxy)+?"
    p1 == p2
    ~is #true
  
  check:
    ~eval
    rx'"x"++'
    ~raises "" // TODO update
#//
regexp.macro 'numrng: $(lhs :: Int) - $(rhs :: Int)':
  when !(lhs is_a PosInt && rhs is_a PosInt)
  | error("you cannot take ranges of non integers")