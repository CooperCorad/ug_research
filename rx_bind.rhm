#lang rhombus/static/and_meta

import:
  file("regex_prototype.rhm") open
  file("regex_prototype.rhm").regexp
  file("regex_prototype.rhm").regexp_meta
  file("regex_prototype.rhm").c_range
  file("regex_prototype.rhm").c_range_meta

bind.macro '«rx '$pat'»':
  let '$(pat :: regexp_meta.Parsed)' = pat
  bind_meta.pack('(rx_infoer,
                   $pat)')
  
bind.infoer 'rx_infoer($static_info, $pat)':
 // match regexp_meta.do_unpack(pat)
  //| '[$_, [$ids, ...]': [bind_meta.get_info(get_id(ids), static_info), ...]
  fun get_id(qtd_id):
    /*print((Syntax.unwrap_all(qtd_id) :: PairList)[2])
    let '$(id :: expr_meta.Parsed)' = ((Syntax.unwrap_all(qtd_id) :: PairList)[2])
    print(id)*/
    match qtd_id
    | '#'$id':
        let '$(id :: bind_meta.Parsed)' = id
        //print(id)
        id
  def [info, s_info, v_info] = (match regexp_meta.do_unpack(pat)
                                | '[$_, [$ids, ...]]':     
                                    def [inter, ...] = [bind_meta.get_info(get_id(ids), static_info),  ...]
                                    def [inter2, ...] = [bind_meta.unpack_info(inter), ...]
                                    def '(($_, $_, ($s_info, ...), ($v_info, ...), $_, $_, $_, $_), ...)' = '($inter2, ...)'
                                    ['($inter, ...)', '(($s_info, ...), ...)', '(($v_info, ...), ...)']
                                | '[$_, #false]': throw("Cannot bind an rx form with no identifiers"))
  print(info +& "\n\n")
  print(s_info +& "\n\n")
  print(v_info +& "\n\n")
  def b_id = '_'
  def syn = '("matching(rx'...' = (rhs :: String))",
              $b_id, //???
              $s_info,
              $v_info,
              rx_matcher,
              rx_committer,
              rx_binder,
              $info)' //needs to include all info for id names generated by the rx'...' form, thus need to evaluate rx'...' at this point
  print(syn)
  syn

bind.matcher 'rx_matcher($rhs, $id, $IF, $success, $failure)':
  '$IF $rhs is_a String
   | $success
   | $failure'

bind.binder 'rx_committer($arg, $id)':

  ''

bind.binder 'rx_binder($arg, ($infos, ...))':
  //import:
    //file("regex_prototype.rhm") open
  //print("here")
  match id
  | '($total_id, $rx_exp)':
      //let rx_exp = regexp_meta.do_unpack(rx_exp)
      //print(rx_exp)
      'def $total_id: $rx_exp' //Avoid execution of rx'...' here, we want to confirm it way ahead of this
  //'let x = 1'
  //'def $id: $arg'

//def rx'("a")("b"("c"))' = "abcd"
//def rx'(a: "a")' = "a"
//def rx'(a: "a")(b: "b")' = "abcd"
//def rx'(total: (hour: ^(["0"-"9"] || ("1"["0"-"2"]))) ":" (minutes: ["0"-"5"][digit]) space (period: ("a"||"p")"m"))' = "12:34 pm"



