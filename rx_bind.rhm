#lang rhombus/static/and_meta

import:
  file("regex_prototype.rhm") open
  file("regex_prototype.rhm").regexp
  file("regex_prototype.rhm").regexp_meta
  file("regex_prototype.rhm").c_range
  file("regex_prototype.rhm").c_range_meta

bind.macro '«rx '$pat'»':
  let '$(pat :: regexp_meta.Parsed)' = pat
  bind_meta.pack('(rx_infoer,
                   $pat)')
  
bind.infoer 'rx_infoer($static_info, $pat)':

  fun get_id(qtd_id):
    match qtd_id
    | '#'$id':
        let '$(id :: bind_meta.Parsed)' = id
        id

  def [info, s_info, v_info] = (match regexp_meta.do_unpack(pat)
                                | '[$str, [$ids, ...]]':     
                                    def [inter, ...] = [bind_meta.get_info(get_id(ids), static_info),  ...]
                                    def [inter2, ...] = [bind_meta.unpack_info(inter), ...]
                                    def '(($_, $_, ($s_info, ...), ($v_info, ...), $_, $_, $_, $_), ...)' = '($inter2, ...)'
                                    ['($(str.unwrap()), $inter, ...)', '(($s_info, ...), ...)', '(($v_info, ...), ...)']
                                | '[$_, #false]': throw("Cannot bind an rx form with no identifiers"))
  print(info +& "\n\n")
  print(s_info +& "\n\n")
  print(v_info +& "\n\n")
  def b_id = '_'
  def syn = '("matching(rx'...' = (rhs :: String))",
              $b_id, //???
              $s_info,
              $v_info,
              rx_matcher,
              rx_committer,
              rx_binder,
              $info)' 
  print(syn)
  syn

bind.matcher 'rx_matcher($rhs, $id, $IF, $success, $failure)':
  '$IF $rhs is_a String
   | $success
   | $failure'

bind.binder 'rx_committer($arg, $id)':

  ''

bind.binder 'rx_binder($arg, $info)': //ideal: arg = rhs, info of pattern '($rx_str, ($infos, ...))' OR '($rx_str, $infos, ...)'???
  // info of pattern '($string_to_match, ($infos, ...))' OR '($string_to_match, $infos, ...)'???
  match info
  | '($rx_str, ($infos, ...))':
      def matched = rx_match(rx_str, arg)
      def mutable i = 1
      for (info: [infos, ...]):
        def '($_, $curr_name, $_, $_,
              $_, $_, $curr_binder, $_)' = bind_meta.unpack_info(info)
        if matched //TODO: move to some sort of repetition?
        | '$curr_binder($curr_name, $(List.to_list(matched)[i]))' //iffy
          i := i + 1 //iffy
        | '$curr_binder($curr_name, #false)'
          
  ''

//def rx'("a")("b"("c"))' = "abcd"
def rx'(a: "a")' = "a"
//def rx'(a: "a")(b: "b")' = "abcd"
//def rx'(total: (hour: ^(["0"-"9"] || ("1"["0"-"2"]))) ":" (minutes: ["0"-"5"][digit]) space (period: ("a"||"p")"m"))' = "12:34 pm"
